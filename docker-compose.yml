version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: virtual_mirror_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: virtual_mirror
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - virtual_mirror_network

  # Redis (Celery Broker)
  redis:
    image: redis:7-alpine
    container_name: virtual_mirror_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - virtual_mirror_network

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: virtual_mirror_minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minio_admin
      MINIO_ROOT_PASSWORD: minio_password
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - virtual_mirror_network

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: virtual_mirror_backend
    restart: unless-stopped
    environment:
      # Database
      DATABASE_URL: postgresql://postgres:postgres_password@db:5432/virtual_mirror
      # Redis
      REDIS_URL: redis://redis:6379/0
      # MinIO
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minio_admin
      MINIO_SECRET_KEY: minio_password
      MINIO_BUCKET_NAME: virtual-mirror
      MINIO_USE_SSL: "false"
      # Application
      ENVIRONMENT: production
      DEBUG: "false"
      CORS_ORIGINS: http://localhost:3000,http://frontend:3000
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - virtual_mirror_network

  # Celery Worker
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: virtual_mirror_celery_worker
    restart: unless-stopped
    command: celery -A celery_app worker --loglevel=info
    environment:
      # Database
      DATABASE_URL: postgresql://postgres:postgres_password@db:5432/virtual_mirror
      # Redis
      REDIS_URL: redis://redis:6379/0
      # MinIO
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minio_admin
      MINIO_SECRET_KEY: minio_password
      MINIO_BUCKET_NAME: virtual-mirror
      MINIO_USE_SSL: "false"
    volumes:
      - ./backend:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - virtual_mirror_network

  # Celery Beat (Scheduler)
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: virtual_mirror_celery_beat
    restart: unless-stopped
    command: celery -A celery_app beat --loglevel=info
    environment:
      # Database
      DATABASE_URL: postgresql://postgres:postgres_password@db:5432/virtual_mirror
      # Redis
      REDIS_URL: redis://redis:6379/0
    volumes:
      - ./backend:/app
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - virtual_mirror_network

  # React Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: virtual_mirror_frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: http://localhost:8000
      NODE_ENV: production
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - virtual_mirror_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  backend_uploads:
    driver: local

networks:
  virtual_mirror_network:
    driver: bridge
